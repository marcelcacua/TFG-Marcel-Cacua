#Analisis de clusters Grafico Final

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import seaborn as sns
import plotly.express as px
from sklearn.metrics import silhouette_score
from scipy.cluster.hierarchy import dendrogram, linkage, fcluster
import matplotlib.patches as mpatches

file_path = "C:\\Users\\marce\\Desktop\\TFG\\Copia de variables_accesibilidad_vivienda.xlsx"
df = pd.read_excel(file_path)

df = df.rename(columns={
    'Provincia ':'Provincia',
    'Tasa_esfuerzo': 'Tasa_esfuerzo',
    'Renat_Media_por_hogar ': 'Renta_media',
    'PIB_per_capita_provincial': 'PIB_PP',
    'Precio_m2': 'Precio_m2',
    'Tipos_hipotecario': 'Tipo_interes',
    'Tasa_Paro': 'Tasa_paro',
    'Tasa_empleo': 'Tasa_empleo',
    'Tasa_crecimiento_población': 'Δ_población',
    'Numero_vivienda_terminadas': 'Vivienda_nueva',
    'Numero_hipotecas': 'Num_Hipotecas',
    'IPV': 'IPV',
    'Importe_medio_hipotecas': 'Importe_hipotecas'
})
df.columns

variables = [
    "Renta_media",
    "PIB_PP",
    "Precio_m2",
     "IPV",
     "IPC",
    "Tasa_empleo",
    "Δ_población",
    "Vivienda_nueva",
    "Num_Hipotecas",
]

df_2022 = df[df["Año"] == 2022].copy()

df_2022 = df_2022.dropna(subset=variables)

scaler = StandardScaler()
data_scaled = scaler.fit_transform(df_2022[variables])

pca = PCA(n_components=3)
principal_components = pca.fit_transform(data_scaled)

columns = [f'PC{i+1}' for i in range(3)]
pca_df = pd.DataFrame(principal_components, columns=columns)
pca_df['Provincia'] = df_2022['Provincia'].values  


kmeans = KMeans(n_clusters=4, random_state=42)
clusters = kmeans.fit_predict(principal_components)
pca_df['Cluster'] = clusters

fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')
sc = ax.scatter(pca_df['PC1'], pca_df['PC2'], pca_df['PC3'],
                c=pca_df['Cluster'], cmap='Set1', s=100)

ax.set_title('Clustering y PCA - 4 Componentes para 2022', fontsize=14)
ax.set_xlabel('PC1')
ax.set_ylabel('PC2')
ax.set_zlabel('PC3')
plt.colorbar(sc, label='Cluster')
plt.tight_layout()
plt.show()

#Grafico Dinamico para ver los valores de los componentes principales para cada provincia.


pca_df['Cluster'] = pca_df['Cluster'].astype(str)

fig = px.scatter_3d(
    pca_df, 
    x='PC1', y='PC2', z='PC3', 
    color='Cluster', 
    hover_name='Provincia',
    title='Clustering y PCA - 4 Componentes para 2024',
    color_discrete_sequence=px.colors.qualitative.Set1
)

fig.update_traces(marker=dict(size=6))
fig.update_layout(
    legend_title='Cluster',
    margin=dict(l=0, r=0, b=0, t=40),
    scene=dict(
        xaxis_title='PC1',
        yaxis_title='PC2',
        zaxis_title='PC3'
    )
)

fig.show()

#--------------------------------------------------------------------------------------------------------------------------------------------------

#Grafico de Varianza Acumulada

explained_variance = pca.explained_variance_ratio_
cumulative_variance = explained_variance.cumsum()

plt.figure(figsize=(10, 6))
sns.barplot(x=columns, y=explained_variance, color='#1f77b4', label='Varianza individual')
sns.lineplot(x=columns, y=cumulative_variance, marker='o', color='#ff7f0e', label='Varianza acumulada')

for i, value in enumerate(explained_variance):
    plt.text(i, value + 0.01, f'{value:.3f}', ha='center', va='bottom', fontsize=12) 

plt.grid(True, linestyle='--', alpha=0.7)
plt.xticks(rotation=45)
plt.ylabel('Varianza explicada')
plt.title('Varianza explicada por cada componente (y acumulada)', fontsize=14)
plt.legend()
plt.tight_layout()
plt.show()

# Mostrar varianza total explicada
varianza_total = np.sum(explained_variance)
print(f"Varianza total explicada por los primeros tres componentes: {varianza_total:.3f}")
print(pca_df[['Provincia', 'Cluster']].sort_values(by='Cluster'))


tabla = pca_df[['Provincia', 'Cluster']].sort_values(by='Cluster')# Asegúrate de que la longitud coincida

# Guardar en un archivo Excel
ruta_salida = "C:\\Users\\marce\\Desktop\\TFG\\IMAGENES FINALES\\Cluster\\pca_cluster_2.xlsx"
tabla.to_excel(ruta_salida, index=False)

print(f"Archivo guardado exitosamente en: {ruta_salida}")



#------------------------------------------------------------------------------------------------------------------------------------------------------

#Grafico Silhouette

silhouette_scores = []

for k in range(2, 10):  # Silhouette no se puede calcular con k=1
    kmeans = KMeans(n_clusters=k, random_state=42)
    cluster_labels = kmeans.fit_predict(principal_components)
    silhouette_avg = silhouette_score(principal_components, cluster_labels)
    silhouette_scores.append(silhouette_avg)

# Gráfico del índice de Silhouette
plt.figure(figsize=(10, 6))
sns.lineplot(x=list(range(2, 10)), y=silhouette_scores, marker='o', linewidth=2.5, color='#d62728')
plt.axvline(x=2, color='red', linestyle='--', label='K óptimo (4)', linewidth=1.8)
plt.title('Índice de Silhouette por número de clusters (K)', fontsize=14)
plt.xlabel('Número de Clusters (K)')
plt.ylabel('Índice de Silhouette')
plt.grid(True, linestyle='--', alpha=0.6)
plt.xticks(range(2, 10))
plt.legend()
plt.tight_layout()
plt.show()

#Grafico dendrograma

file_path = "C:\\Users\\marce\\Desktop\\TFG\\Copia de variables_accesibilidad_vivienda.xlsx"
df = pd.read_excel(file_path)

df = df.rename(columns={
    'Provincia ':'Provincia',
    'Tasa_esfuerzo': 'Tasa_esfuerzo',
    'Renat_Media_por_hogar ': 'Renta_media',
    'PIB_per_capita_provincial': 'PIB_PP',
    'Precio_m2': 'Precio_m2',
    'Tipos_hipotecario': 'Tipo_interes',
    'Tasa_Paro': 'Tasa_paro',
    'Tasa_empleo': 'Tasa_empleo',
    'Tasa_crecimiento_población': 'Δ_población',
    'Numero_vivienda_terminadas': 'Vivienda_nueva',
    'Numero_hipotecas': 'Num_Hipotecas',
    'IPV': 'IPV',
    'Importe_medio_hipotecas': 'Importe_hipotecas'
})
df.columns

variables = [
    "Renta_media",
    "PIB_PP",
    "Precio_m2",
     "IPV",
     "IPC",
    "Tasa_empleo",
    "Δ_población",
    "Vivienda_nueva",
    "Num_Hipotecas",
]

df_2022 = df[df["Año"] == 2022].copy()

df_2022 = df_2022.dropna(subset=variables)


scaler = StandardScaler()
data_scaled = scaler.fit_transform(df_2022[variables])


pca = PCA(n_components=3)
principal_components = pca.fit_transform(data_scaled)

X = df_2022[variables].dropna()

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

linked = linkage(X_scaled, method='ward')

plt.figure(figsize=(12, 6))
dendrogram(linked,
           orientation='top',
           distance_sort='descending',
           show_leaf_counts=True)
plt.axhline(y=8, color='r', linestyle='--', label='Corte a distancia 8')
plt.title("Dendrograma - Análisis jerárquico (Corte en 4 grupos)")
plt.xlabel("Observaciones")
plt.ylabel("Distancia")
plt.legend()
plt.show()

#------------------------------------------------------------------------------------------------------------------------------------------------------------------




