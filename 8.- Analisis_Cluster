#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ANALISIS DE CLUSTER
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import seaborn as sns
import plotly.express as px
from sklearn.metrics import silhouette_score
from scipy.cluster.hierarchy import dendrogram, linkage, fcluster
import matplotlib.patches as mpatches

file_path = "C:\\Users\\marce\\Desktop\\TFG\\CORRECCIÓN FINAL\\Python_TFG\\variables_accesibilidad_vivienda.xlsx"
df = pd.read_excel(file_path)

df = df.rename(columns={
    'Renat_Media_por_hogar ': 'Renta_media',
    'PIB_per_capita_provincial': 'PIB_PP',
    'Precio_m2': 'Precio_m2',
    'IPV' : 'IPV',
    'IPC' : 'IPC',
    'Tasa_empleo': 'Tasa_empleo',
    'Tasa_crecimiento_población': 'Δ_población',
    'Numero_vivienda_terminadas': 'Vivienda_nueva',
    'Numero_hipotecas' : 'Num_Hipotecas',
})

variables = [
    "Renta_media",
    "PIB_PP",
    "Precio_m2",
     "IPV",
     "IPC",
    "Tasa_empleo",
    "Δ_población",
    "Vivienda_nueva",
    "Num_Hipotecas",
]

df_filtered = df[df["Año"].isin([2015, 2018, 2022])].copy()
df_filtered = df_filtered.dropna(subset=variables)

scaler = StandardScaler()
data_scaled_all = scaler.fit_transform(df_filtered[variables])

pca = PCA(n_components=3)
principal_components_all = pca.fit_transform(data_scaled_all)

pca_all_df = pd.DataFrame(principal_components_all, columns=['PC1', 'PC2', 'PC3'])
pca_all_df['Provincia'] = df_filtered['Provincia'].values
pca_all_df['Año'] = df_filtered['Año'].values

pca_2022 = pca_all_df[pca_all_df['Año'] == 2022].copy()

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#GRAFICO SILHOUETTE 
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Se procede a realizar un grafico de silhouette que nos muestre cual es el numero optimo de clusters para nuestro modelo.

silhouette_scores = []
ks = list(range(2, 10))

for k in ks:
    kmeans = KMeans(n_clusters=k, random_state=42)
    labels = kmeans.fit_predict(pca_2022[['PC1', 'PC2', 'PC3']])
    score = silhouette_score(pca_2022[['PC1', 'PC2', 'PC3']], labels)
    silhouette_scores.append(score)

plt.figure(figsize=(10, 6))
sns.lineplot(x=ks, y=silhouette_scores, marker='o', linewidth=2.5, color='#d62728')
plt.axvline(x=3, color='blue', linestyle='--', label='K seleccionado = 3')
plt.title('Índice de Silhouette según número de clusters (K)', fontsize=14)
plt.xlabel('Número de Clusters (K)')
plt.ylabel('Índice de Silhouette')
plt.grid(True, linestyle='--', alpha=0.6)
plt.xticks(ks)
plt.legend()
plt.tight_layout()
plt.show()

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Gráfico de Dendograma
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

X_scaled = scaler.fit_transform(scaler)
linked = linkage(X_scaled, method='ward')

plt.figure(figsize=(12, 6))
dendrogram(linked,
           orientation='top',
           distance_sort='descending',
           show_leaf_counts=True)
plt.axhline(y=16, color='r', linestyle='--', label='Corte a distancia 16')
plt.title("Dendrograma - Análisis jerárquico (Corte en 3 grupos)")
plt.xlabel("Observaciones")
plt.ylabel("Distancia")
plt.legend()
plt.show()

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#LOADINGS 
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Volvemos a añadir los loadings para recordar las caracteristiicas de cada componenet principal, de esta manera podremos conocer
#Las craa¡acteristicas que describen a cada segmento.

loadings_df = pd.DataFrame(
    pca.components_.T,
    columns=[f'PC{i+1}' for i in range(pca.n_components_)],
    index=variables
)

plt.figure(figsize=(12, 6))
sns.heatmap(loadings_df, annot=True, cmap='RdBu', center=0, fmt=".3f")

plt.title('Cargas (Loadings) de las Variables en los 3 Primeros Componentes Principales', fontsize=14)
plt.xlabel('Componentes Principales')
plt.ylabel('Variables')
plt.tight_layout()
plt.show()

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Gráfico de dispersión Cluster
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Se realiza un primer grafico tridimensional que muestre las provincias para el periodo 2022

kmeans = KMeans(n_clusters=3, random_state=42)
clusters = kmeans.fit_predict(pca_2022[['PC1', 'PC2', 'PC3']])
pca_2022['Cluster'] = clusters + 1 

fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')
sc = ax.scatter(pca_2022['PC1'], pca_2022['PC2'], pca_2022['PC3'],
                c=pca_2022['Cluster'], cmap='Set1', s=100)

ax.set_title('Clustering y PCA - 3 Componentes para 2022', fontsize=14)
ax.set_xlabel('PC1')
ax.set_ylabel('PC2')
ax.set_zlabel('PC3')
plt.colorbar(sc, label='Cluster')
plt.tight_layout()
plt.show()
 
#De igual manera generamos una tabla que nos muestre el la provincia junto a sus respectivos valores por cada componente principal y a que segmento pertenecen.

componentes_provincia = pca_2022[['Provincia', 'PC1', 'PC2', 'PC3', 'Cluster']]

print(componentes_provincia)

componentes_provincia.to_excel("C:\\Users\\marce\\Desktop\\TFG\\CORRECCIÓN FINAL\\Python_TFG\\componentes_provincia_2022_2.xlsx", index=False)

#Finalmente generamos un gráfico dinámico para ver los valores de los componentes principales para cada provincia dentro del la representación 3D.

pca_2022['Cluster'] = pca_2022['Cluster'].astype(str)

fig = px.scatter_3d(
    pca_2022, 
    x='PC1', y='PC2', z='PC3', 
    color='Cluster', 
    hover_name='Provincia',
    title='Clustering y PCA - 4 Componentes para 2024',
    color_discrete_sequence=px.colors.qualitative.Set1
)

fig.update_traces(marker=dict(size=6))
fig.update_layout(
    legend_title='Cluster',
    margin=dict(l=0, r=0, b=0, t=40),
    scene=dict(
        xaxis_title='PC1',
        yaxis_title='PC2',
        zaxis_title='PC3'
    )
)

fig.show()
